package cn.my3gods.demotest;

import cn.my3gods.demotest.model.ProductEntity;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;

public class JacksonTest {

    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

    @Test
    public void testJson() throws JsonProcessingException {
        String json = "{\n"
            + "    \"productEntity\": {\n"
            + "        \"id\": null,\n"
            + "        \"owner\": \"Cobo\",\n"
            + "        \"sku\": \"REFACTOR123456COBO\",\n"
            + "        \"ean\": \"123ABC312\",\n"
            + "        \"cnName\": \"测试重构\",\n"
            + "        \"enName\": \"TestRefactor\",\n"
            + "        \"hsCode\": \"\",\n"
            + "        \"unit\": null,\n"
            + "        \"length\": 100,\n"
            + "        \"width\": 100,\n"
            + "        \"height\": 100,\n"
            + "        \"volume\": null,\n"
            + "        \"weight\": 50,\n"
            + "        \"description\": \"哈哈\",\n"
            + "        \"jsonInfo\": null,\n"
            + "        \"createUser\": null,\n"
            + "        \"createDate\": null,\n"
            + "        \"lastUpdateUser\": null,\n"
            + "        \"lastUpdateDate\": null,\n"
            + "        \"brand\": null,\n"
            + "        \"spec\": null,\n"
            + "        \"category\": null,\n"
            + "        \"status\": null,\n"
            + "        \"price\": 1050,\n"
            + "        \"images\": null,\n"
            + "        \"materielCode\": null,\n"
            + "        \"barCode\": null,\n"
            + "        \"currency\": \"RMB\",\n"
            + "        \"useWssku\": null,\n"
            + "        \"labelCode\": \"LabelWS004\",\n"
            + "        \"hasUniqueCode\": false,\n"
            + "        \"model\": null,\n"
            + "        \"pickStrategy\": null,\n"
            + "        \"categoryName\": null,\n"
            + "        \"declaredPriceinfo\": null,\n"
            + "        \"declareCnname\": \"\",\n"
            + "        \"declareEnname\": \"\",\n"
            + "        \"declarePrice\": null,\n"
            + "        \"pictureAddress\": \"\",\n"
            + "        \"wssku\": null,\n"
            + "        \"wmsInfo\": null,\n"
            + "        \"hasLabel\": false,\n"
            + "        \"labelName\": null,\n"
            + "        \"log\": null,\n"
            + "        \"defSign\": false,\n"
            + "        \"enableWssku\": null,\n"
            + "        \"customCode\": \"TEST000\",\n"
            + "        \"productUrl\": null,\n"
            + "        \"useSign\": null,\n"
            + "        \"statusType\": null,\n"
            + "        \"productBatteryEntity\": null,\n"
            + "        \"dataComparison\": null\n"
            + "    },\n"
            + "    \"customerList\": [\n"
            + "        \"9001\",\n"
            + "        \"9002\",\n"
            + "        \"APITestOwner\",\n"
            + "        \"Cobo\",\n"
            + "        \"WS03C2019003\",\n"
            + "        \"FL2018WS\",\n"
            + "        \"RELXFL2018WS\",\n"
            + "        \"RMFL2018WS\",\n"
            + "        \"GR1PS\",\n"
            + "        \"GG2018WS\",\n"
            + "        \"LimstoreTest\",\n"
            + "        \"MB2017WS\",\n"
            + "        \"TTL2015SZ\",\n"
            + "        \"OPAS\",\n"
            + "        \"SXDZ\",\n"
            + "        \"HWPHONE\",\n"
            + "        \"HXGD1\",\n"
            + "        \"BestExpress\",\n"
            + "        \"TYPD\",\n"
            + "        \"XMPHONE\",\n"
            + "        \"WS2017SZ\",\n"
            + "        \"WLLP\",\n"
            + "        \"BYDDY\",\n"
            + "        \"HJPD\",\n"
            + "        \"RHNK\",\n"
            + "        \"ZWSFS\",\n"
            + "        \"MTSBWFS\",\n"
            + "        \"YRF\",\n"
            + "        \"Luckycomm\",\n"
            + "        \"test001\",\n"
            + "        \"ESVAYAVA\",\n"
            + "        \"FTNK\"\n"
            + "    ],\n"
            + "    \"userName\": \"admin\",\n"
            + "    \"userId\": \"1\",\n"
            + "    \"customer\": {\n"
            + "        \"createUser\": null,\n"
            + "        \"createDate\": 1539670664123,\n"
            + "        \"updateUser\": null,\n"
            + "        \"updateDate\": 1573548734941,\n"
            + "        \"id\": 10,\n"
            + "        \"code\": \"Cobo\",\n"
            + "        \"name\": \"Cobo\",\n"
            + "        \"shortCode\": null,\n"
            + "        \"organizationCode\": \"Cobo\",\n"
            + "        \"contactPerson\": \"Sherry\",\n"
            + "        \"telPhone\": \"13613029097\",\n"
            + "        \"phone\": \"\",\n"
            + "        \"address\": \"\",\n"
            + "        \"email\": \"sherry.zhang@sburstsc.com\",\n"
            + "        \"enable\": true,\n"
            + "        \"idStr\": \"10\"\n"
            + "    }\n"
            + "}";
        Map map = OBJECT_MAPPER.readValue(json, Map.class);
        ProductEntity productEntity = OBJECT_MAPPER.convertValue(map.get("productEntity"), ProductEntity.class);
        System.err.println(productEntity);
        System.err.println(OBJECT_MAPPER.writeValueAsString(productEntity));
    }

    @Test
    public void testParseList() throws JsonProcessingException {
        String json = "{\n"
            + "    \"queryList\": [{\n"
            + "        \"id\": null,\n"
            + "        \"owner\": \"Cobo\",\n"
            + "        \"sku\": \"REFACTOR123456COBO\",\n"
            + "        \"ean\": \"123ABC312\",\n"
            + "        \"cnName\": \"测试重构\",\n"
            + "        \"enName\": \"TestRefactor\",\n"
            + "        \"hsCode\": \"\",\n"
            + "        \"unit\": null,\n"
            + "        \"length\": 100,\n"
            + "        \"width\": 100,\n"
            + "        \"height\": 100,\n"
            + "        \"volume\": null,\n"
            + "        \"weight\": 50,\n"
            + "        \"description\": \"哈哈\",\n"
            + "        \"jsonInfo\": null,\n"
            + "        \"createUser\": null,\n"
            + "        \"createDate\": null,\n"
            + "        \"lastUpdateUser\": null,\n"
            + "        \"lastUpdateDate\": null,\n"
            + "        \"brand\": null,\n"
            + "        \"spec\": null,\n"
            + "        \"category\": null,\n"
            + "        \"status\": null,\n"
            + "        \"price\": 1050,\n"
            + "        \"images\": null,\n"
            + "        \"materielCode\": null,\n"
            + "        \"barCode\": null,\n"
            + "        \"currency\": \"RMB\",\n"
            + "        \"useWssku\": null,\n"
            + "        \"labelCode\": \"LabelWS004\",\n"
            + "        \"hasUniqueCode\": false,\n"
            + "        \"model\": null,\n"
            + "        \"pickStrategy\": null,\n"
            + "        \"categoryName\": null,\n"
            + "        \"declaredPriceinfo\": null,\n"
            + "        \"declareCnname\": \"\",\n"
            + "        \"declareEnname\": \"\",\n"
            + "        \"declarePrice\": null,\n"
            + "        \"pictureAddress\": \"\",\n"
            + "        \"wssku\": null,\n"
            + "        \"wmsInfo\": null,\n"
            + "        \"hasLabel\": false,\n"
            + "        \"labelName\": null,\n"
            + "        \"log\": null,\n"
            + "        \"defSign\": false,\n"
            + "        \"enableWssku\": null,\n"
            + "        \"customCode\": \"TEST000\",\n"
            + "        \"productUrl\": null,\n"
            + "        \"useSign\": null,\n"
            + "        \"statusType\": null,\n"
            + "        \"productBatteryEntity\": null,\n"
            + "        \"dataComparison\": null\n"
            + "    },"
            +"    {\n"
            + "        \"id\": null,\n"
            + "        \"owner\": \"Cobo\",\n"
            + "        \"sku\": \"REFACTOR123456COBO\",\n"
            + "        \"ean\": \"123ABC312\",\n"
            + "        \"cnName\": \"测试重构\",\n"
            + "        \"enName\": \"TestRefactor\",\n"
            + "        \"hsCode\": \"\",\n"
            + "        \"unit\": null,\n"
            + "        \"length\": 100,\n"
            + "        \"width\": 100,\n"
            + "        \"height\": 100,\n"
            + "        \"volume\": null,\n"
            + "        \"weight\": 50,\n"
            + "        \"description\": \"哈哈\",\n"
            + "        \"jsonInfo\": null,\n"
            + "        \"createUser\": null,\n"
            + "        \"createDate\": null,\n"
            + "        \"lastUpdateUser\": null,\n"
            + "        \"lastUpdateDate\": null,\n"
            + "        \"brand\": null,\n"
            + "        \"spec\": null,\n"
            + "        \"category\": null,\n"
            + "        \"status\": null,\n"
            + "        \"price\": 1050,\n"
            + "        \"images\": null,\n"
            + "        \"materielCode\": null,\n"
            + "        \"barCode\": null,\n"
            + "        \"currency\": \"RMB\",\n"
            + "        \"useWssku\": null,\n"
            + "        \"labelCode\": \"LabelWS004\",\n"
            + "        \"hasUniqueCode\": false,\n"
            + "        \"model\": null,\n"
            + "        \"pickStrategy\": null,\n"
            + "        \"categoryName\": null,\n"
            + "        \"declaredPriceinfo\": null,\n"
            + "        \"declareCnname\": \"\",\n"
            + "        \"declareEnname\": \"\",\n"
            + "        \"declarePrice\": null,\n"
            + "        \"pictureAddress\": \"\",\n"
            + "        \"wssku\": null,\n"
            + "        \"wmsInfo\": null,\n"
            + "        \"hasLabel\": false,\n"
            + "        \"labelName\": null,\n"
            + "        \"log\": null,\n"
            + "        \"defSign\": false,\n"
            + "        \"enableWssku\": null,\n"
            + "        \"customCode\": \"TEST000\",\n"
            + "        \"productUrl\": null,\n"
            + "        \"useSign\": null,\n"
            + "        \"statusType\": null,\n"
            + "        \"productBatteryEntity\": null,\n"
            + "        \"dataComparison\": null\n"
            + "    }"
            + "]}";
        Map param = OBJECT_MAPPER.readValue(json, Map.class);
//        List<ProductEntity> queryList1 = (List<ProductEntity>)param.get("queryList");
        List<ProductEntity> queryList = OBJECT_MAPPER.convertValue(param.get("queryList"), new TypeReference<List<ProductEntity>>() {
        });
        queryList.forEach(productEntity -> {
            try {
                System.err.println(OBJECT_MAPPER.writeValueAsString(productEntity));
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        });
    }
}
